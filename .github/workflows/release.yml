name: Release and Publish

on:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Create test directory
      run: |
        mkdir -p test_workspace
    
    - name: Run tests
      run: |
        cd test_workspace
        python ../test_package.py
    
    - name: Verify package version
      run: |
        python -c "import gui_image_studio; print('Release version:', gui_image_studio.__version__)"
    
    - name: Verify version matches tag
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      run: |
        PACKAGE_VERSION=$(python -c "import gui_image_studio; print(gui_image_studio.__version__)")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch! Package version ($PACKAGE_VERSION) does not match tag ($TAG_VERSION)"
          exit 1
        fi
    
    - name: Cleanup test files
      run: |
        rm -rf test_workspace
      if: always()

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .[dev]
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        python -m twine check dist/*
    
    - name: Test installation from built package
      run: |
        # Create a fresh virtual environment for testing
        python -m venv test_env
        source test_env/bin/activate || test_env\Scripts\activate
        pip install dist/*.whl
        python -c "import gui_image_studio; print('Installed version:', gui_image_studio.__version__)"
        deactivate
    
    - name: Run security checks
      run: |
        pip install safety bandit
        safety check
        bandit -r src/ -f json || true
    
    - name: Validate package for PyPI
      run: |
        # Perform a dry run to validate the package
        python -m twine check dist/*
        echo "Package validation completed successfully"
    
    - name: Check PyPI token availability
      id: check-token
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -z "$PYPI_TOKEN" ]; then
          echo "PyPI token not available. Skipping PyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "PyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Publish to PyPI
      if: steps.check-token.outputs.token-available == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing package to PyPI..."
        python -m twine upload dist/* --verbose
        echo "✅ Package successfully published to PyPI!"
    
    - name: PyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "⚠️ PyPI upload was skipped because PYPI_API_TOKEN secret is not configured."
        echo "To enable PyPI publishing:"
        echo "1. Go to your repository Settings > Secrets and variables > Actions"
        echo "2. Add a new repository secret named 'PYPI_API_TOKEN'"
        echo "3. Set the value to your PyPI API token"
        echo "4. Re-run this workflow"
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}