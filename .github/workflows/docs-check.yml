name: Documentation Check

on:
  pull_request:
    paths:
      - 'docs/**'
      - 'src/**'
      - '.github/workflows/docs*.yml'

jobs:
  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements-docs.txt
        pip install -e .
    
    - name: Create sample images
      run: |
        python -c "
        try:
            from gui_image_studio.sample_creator import SampleCreator
            creator = SampleCreator('sample_images', count=1)
            creator.create_all_samples()
        except Exception as e:
            print(f'Sample creation failed: {e}')
            import os
            os.makedirs('sample_images', exist_ok=True)
        "
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html
    
    - name: Check for build warnings
      run: |
        cd docs
        if [ -f _build/html/.buildinfo ]; then
          echo "‚úÖ Documentation built successfully"
        else
          echo "‚ùå Documentation build failed"
          exit 1
        fi
    
    - name: Validate RST files
      run: |
        cd docs
        python -c "
        import os
        import docutils.core
        
        rst_files = []
        for root, dirs, files in os.walk('.'):
            if '_build' in root:
                continue
            rst_files.extend([os.path.join(root, f) for f in files if f.endswith('.rst')])
        
        errors = 0
        for rst_file in rst_files:
            try:
                with open(rst_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                docutils.core.publish_doctree(content)
            except Exception as e:
                print(f'‚ùå {rst_file}: {e}')
                errors += 1
        
        if errors > 0:
            exit(1)
        print(f'‚úÖ All {len(rst_files)} RST files are valid')
        "
    
    - name: Check essential files exist
      run: |
        cd docs/_build/html
        essential_files=(
          "index.html"
          "api/index.html"
          "examples/index.html"
          "user_guide/index.html"
          "installation.html"
          "quickstart.html"
          "contributing.html"
          "changelog.html"
          "license.html"
        )
        
        missing_files=()
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "‚ùå Missing essential files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        else
          echo "‚úÖ All essential documentation files are present"
        fi
    
    - name: Quick link check
      run: |
        cd docs
        # Quick internal link check (external links can be slow)
        python -c "
        import os
        import re
        from urllib.parse import urlparse
        
        html_dir = '_build/html'
        internal_links = set()
        broken_links = []
        
        # Find all internal links
        for root, dirs, files in os.walk(html_dir):
            for file in files:
                if file.endswith('.html'):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                        
                        # Find href links
                        links = re.findall(r'href=[\"\'](.*?)[\"\']', content)
                        for link in links:
                            if link.startswith('#') or link.startswith('http'):
                                continue
                            if link.endswith('.html') or '/' in link:
                                internal_links.add(link)
                    except Exception:
                        pass
        
        # Check if internal links exist
        for link in internal_links:
            if link.startswith('/'):
                link = link[1:]  # Remove leading slash
            
            link_path = os.path.join(html_dir, link)
            if not os.path.exists(link_path):
                # Try with index.html appended
                if link.endswith('/'):
                    link_path = os.path.join(html_dir, link, 'index.html')
                
                if not os.path.exists(link_path):
                    broken_links.append(link)
        
        if broken_links:
            print(f'‚ö†Ô∏è Found {len(broken_links)} potentially broken internal links:')
            for link in broken_links[:10]:  # Show first 10
                print(f'  - {link}')
        else:
            print(f'‚úÖ Checked {len(internal_links)} internal links - all appear valid')
        "
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check if documentation was built successfully
          const buildDir = 'docs/_build/html';
          const indexExists = fs.existsSync(path.join(buildDir, 'index.html'));
          
          let comment = '## üìö Documentation Check Results\n\n';
          
          if (indexExists) {
            comment += '‚úÖ **Documentation built successfully**\n\n';
            
            // Count generated files
            let fileCount = 0;
            function countFiles(dir) {
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                if (fs.statSync(filePath).isDirectory()) {
                  countFiles(filePath);
                } else if (file.endsWith('.html')) {
                  fileCount++;
                }
              }
            }
            
            try {
              countFiles(buildDir);
              comment += `üìÑ Generated ${fileCount} HTML pages\n\n`;
            } catch (e) {
              comment += 'üìÑ Documentation pages generated\n\n';
            }
            
            comment += '### Key sections:\n';
            comment += '- üìñ [API Reference](api/index.html)\n';
            comment += '- üöÄ [Quick Start](quickstart.html)\n';
            comment += '- üí° [Examples](examples/index.html)\n';
            comment += '- üë• [User Guide](user_guide/index.html)\n';
            comment += '- ü§ù [Contributing](contributing.html)\n\n';
            
            comment += '> The documentation will be automatically deployed to GitHub Pages when this PR is merged to main.\n';
          } else {
            comment += '‚ùå **Documentation build failed**\n\n';
            comment += 'Please check the workflow logs for details and fix any issues.\n';
          }
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });