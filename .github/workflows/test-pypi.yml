name: Test PyPI Upload

on:
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Version suffix for test upload (e.g., dev1, rc1, alpha1)'
        required: false
        default: 'dev'
        type: string
  push:
    branches:
      - develop
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - 'setup.py'

permissions:
  contents: read
  id-token: write

jobs:
  test-pypi-upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add overall job timeout

    steps:
    - uses: actions/checkout@v4

    - name: Check system resources
      run: |
        echo "=== System Resources ==="
        df -h
        free -h
        echo "CPU cores: $(nproc)"
        echo "========================"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install build dependencies
      timeout-minutes: 5  # Add timeout for pip installs
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Install package dependencies
      timeout-minutes: 10  # Add timeout for package installation
      run: |
        pip install -e .[dev] --timeout 300

    - name: Generate test version
      id: test-version
      timeout-minutes: 2  # Add timeout for version generation
      run: |
        # Get the base version from pyproject.toml with error handling
        set -e  # Exit on any error
        BASE_VERSION=$(python -c "
        try:
            import tomllib
            with open('pyproject.toml', 'rb') as f:
                data = tomllib.load(f)
        except ImportError:
            import tomli
            with open('pyproject.toml', 'rb') as f:
                data = tomli.load(f)
        print(data['project']['version'])
        " 2>/dev/null)

        if [ -z "$BASE_VERSION" ]; then
          echo "Error: Could not extract version from pyproject.toml"
          exit 1
        fi

        # Create test version with timestamp and suffix
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        VERSION_SUFFIX="${{ github.event.inputs.version_suffix || 'dev' }}"
        TEST_VERSION="${BASE_VERSION}.${VERSION_SUFFIX}${TIMESTAMP}"

        echo "base-version=${BASE_VERSION}" >> $GITHUB_OUTPUT
        echo "test-version=${TEST_VERSION}" >> $GITHUB_OUTPUT
        echo "Test version will be: ${TEST_VERSION}"

    - name: Update version for test upload
      timeout-minutes: 1  # Add timeout for version update
      run: |
        # Backup original pyproject.toml
        cp pyproject.toml pyproject.toml.backup

        # Temporarily update the version in pyproject.toml for test upload
        sed -i 's/version = "${{ steps.test-version.outputs.base-version }}"/version = "${{ steps.test-version.outputs.test-version }}"/' pyproject.toml

        # Verify the change was made
        if grep -q "${{ steps.test-version.outputs.test-version }}" pyproject.toml; then
          echo "Updated version to: ${{ steps.test-version.outputs.test-version }}"
        else
          echo "Error: Version update failed"
          exit 1
        fi

    - name: Build package
      timeout-minutes: 5  # Add timeout for build
      run: |
        echo "=== Pre-build Resources ==="
        free -h
        echo "=========================="

        python -m build

        echo "=== Post-build Resources ==="
        free -h
        echo "============================="

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Test installation from built package
      timeout-minutes: 5  # Add timeout for installation test
      run: |
        # Create a fresh virtual environment for testing
        python -m venv test_env
        source test_env/bin/activate
        pip install dist/*.whl --timeout 300
        python -c "import gui_image_studio; print('Installed version:', gui_image_studio.__version__)"
        deactivate

    - name: Run basic tests
      run: |
        python -c "import gui_image_studio; print('[OK] Package import successful'); print('Version:', gui_image_studio.__version__)"
        python -c "
        try:
            from gui_image_studio import ImageLoader
            print('[OK] ImageLoader import successful')
        except ImportError as e:
            print('[WARN] ImageLoader import failed:', e)
        "
        python -c "
        try:
            from gui_image_studio import EmbeddedImageGenerator
            print('[OK] EmbeddedImageGenerator import successful')
        except ImportError as e:
            print('[WARN] EmbeddedImageGenerator import failed:', e)
        "

    - name: Check TestPyPI token availability
      id: check-token
      run: |
        if [ -z "${{ secrets.TEST_PYPI_API_TOKEN }}" ]; then
          echo "TestPyPI token not available. Skipping TestPyPI upload."
          echo "token-available=false" >> $GITHUB_OUTPUT
        else
          echo "TestPyPI token available. Proceeding with upload."
          echo "token-available=true" >> $GITHUB_OUTPUT
        fi

    - name: Upload to TestPyPI
      if: steps.check-token.outputs.token-available == 'true'
      timeout-minutes: 10  # Add timeout for upload
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        echo "[UPLOAD] Uploading package to TestPyPI..."
        python -m twine upload --repository testpypi dist/* --verbose
        echo "[SUCCESS] Package successfully uploaded to TestPyPI!"
        echo ""
        echo "[TEST] Test your package with:"
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ gui-image-studio==${{ steps.test-version.outputs.test-version }}"

    - name: TestPyPI upload skipped
      if: steps.check-token.outputs.token-available == 'false'
      run: |
        echo "[WARN] TestPyPI upload was skipped because TEST_PYPI_API_TOKEN secret is not configured."
        echo ""
        echo "To enable TestPyPI publishing:"
        echo "1. Create an account at https://test.pypi.org"
        echo "2. Generate an API token at https://test.pypi.org/manage/account/"
        echo "3. Go to your repository Settings > Secrets and variables > Actions"
        echo "4. Add a new repository secret named 'TEST_PYPI_API_TOKEN'"
        echo "5. Set the value to your TestPyPI API token"
        echo "6. Re-run this workflow"

    - name: Installation test from TestPyPI
      if: steps.check-token.outputs.token-available == 'true'
      timeout-minutes: 8  # Add timeout for TestPyPI installation test
      run: |
        echo "[WAIT] Waiting 30 seconds for TestPyPI to process the upload..."
        sleep 30

        # Test installation from TestPyPI with timeout and retry logic
        python -m venv testpypi_env
        source testpypi_env/bin/activate

        echo "[INSTALL] Attempting to install from TestPyPI..."
        timeout 300 pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ gui-image-studio==${{ steps.test-version.outputs.test-version }} --timeout 180 || echo "[WARN] Installation from TestPyPI failed (this is common due to propagation delays)"

        deactivate

    - name: Cleanup
      if: always()
      timeout-minutes: 2  # Add timeout for cleanup
      run: |
        # Clean up test environments
        rm -rf test_env testpypi_env

        # Restore original version in pyproject.toml
        if [ -f pyproject.toml.backup ]; then
          mv pyproject.toml.backup pyproject.toml
          echo "Restored pyproject.toml from backup"
        else
          git checkout pyproject.toml || echo "Could not restore pyproject.toml"
        fi

        # Show final resource usage
        echo "=== Final Resource Usage ==="
        df -h
        free -h
        echo "============================"

    - name: Summary
      if: steps.check-token.outputs.token-available == 'true'
      run: |
        echo "[COMPLETE] TestPyPI upload completed!"
        echo ""
        echo "[SUMMARY] Summary:"
        echo "- Base version: ${{ steps.test-version.outputs.base-version }}"
        echo "- Test version: ${{ steps.test-version.outputs.test-version }}"
        echo "- TestPyPI URL: https://test.pypi.org/project/gui-image-studio/${{ steps.test-version.outputs.test-version }}/"
        echo ""
        echo "[TEST] To test the uploaded package:"
        echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ gui-image-studio==${{ steps.test-version.outputs.test-version }}"
