name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Lint with black
      run: |
        black .
      continue-on-error: true

    - name: Lint with flake8
      run: |
        flake8 src/gui_image_studio tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/gui_image_studio tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy src/gui_image_studio
      continue-on-error: true

    - name: Security check with bandit
      run: |
        bandit -r src/gui_image_studio/ --skip B404,B603
      continue-on-error: true

    - name: Test with pytest (Linux with xvfb)
      if: runner.os == 'Linux'
      env:
        DISPLAY: ':99'
        QT_QPA_PLATFORM: 'offscreen'
        MPLBACKEND: 'Agg'
        CI: 'true'
      run: |
        xvfb-run -a pytest --cov=gui_image_studio --cov-report=xml --timeout=300
      continue-on-error: true

    - name: Test with pytest (Windows/macOS)
      if: runner.os != 'Linux'
      env:
        QT_QPA_PLATFORM: 'offscreen'
        MPLBACKEND: 'Agg'
        CI: 'true'
      run: |
        pytest --cov=gui_image_studio --cov-report=xml --timeout=300
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with black again
      run: black .

    - name: Check code formatting with black
      run: |
        black --check .

    - name: Check import sorting with isort
      run: |
        isort --check-only src/gui-image-studio

    - name: Run safety check
      run: |
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
