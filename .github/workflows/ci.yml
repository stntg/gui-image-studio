name: CI
# Updated to trigger workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # Add job timeout
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: System information
      run: |
        echo "Runner OS: ${{ runner.os }}"
        echo "Python version: ${{ matrix.python-version }}"
        echo "Architecture: $(uname -m 2>/dev/null || echo 'N/A')"
        echo "Available memory: $(free -h 2>/dev/null || echo 'N/A')"
      shell: bash
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev] --timeout 300
    
    - name: Run pytest tests
      timeout-minutes: 5
      run: |
        python -m pytest tests/test_basic_pytest.py -v --tb=short
      env:
        PYTHONIOENCODING: utf-8
        CI: true
    
    - name: Run legacy tests
      timeout-minutes: 5
      run: |
        # Run the existing test files (if they exist and are executable)
        echo "Running legacy tests..."
        for test_file in tests/test_package.py tests/test_embedded.py tests/test_gif_animation.py tests/test_tint_visibility.py; do
          if [ -f "$test_file" ]; then
            echo "Running $test_file..."
            python "$test_file" || echo "Warning: $test_file failed"
          else
            echo "Skipping $test_file (not found)"
          fi
        done
      shell: bash
      env:
        PYTHONIOENCODING: utf-8
        CI: true
      continue-on-error: true
    
    - name: Test package import
      run: |
        python -c "import gui_image_studio; print('Package version:', gui_image_studio.__version__)"
    
    - name: Test CLI functionality
      timeout-minutes: 3
      run: |
        mkdir -p test_workspace
        cd test_workspace
        python -c "
        import sys
        import os
        sys.path.insert(0, os.path.join('..', 'src'))
        from gui_image_studio.sample_creator import create_sample_images
        try:
            create_sample_images()
            print('Sample images created successfully')
        except Exception as e:
            print(f'Sample creation failed: {e}')
            sys.exit(1)
        "
      shell: bash
    
    - name: Cleanup test files
      timeout-minutes: 2
      run: |
        echo "Cleaning up test files..."
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          powershell -Command "if (Test-Path test_workspace) { Remove-Item -Recurse -Force test_workspace -ErrorAction SilentlyContinue }"
        else
          rm -rf test_workspace
        fi
        echo "Cleanup completed"
      shell: bash
      if: always()

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install linting tools
      timeout-minutes: 5
      run: |
        pip install flake8 black isort --timeout 300
    
    - name: Run flake8
      timeout-minutes: 2
      run: |
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 --exclude=__pycache__,*embedded_images.py
      continue-on-error: true
    
    - name: Check code formatting with black
      timeout-minutes: 2
      run: |
        black --check src/ --line-length=88 --exclude=".*embedded_images\.py"
      continue-on-error: true
    
    - name: Check import sorting
      timeout-minutes: 2
      run: |
        isort --check-only src/ --profile=black --skip-glob="*embedded_images.py"
      continue-on-error: true