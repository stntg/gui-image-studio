name: CI
# Updated to trigger workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Create test directory
      run: |
        mkdir -p test_workspace
        cd test_workspace
    
    - name: Run package tests
      run: |
        cd test_workspace
        python ../test_package.py
      env:
        PYTHONIOENCODING: utf-8
    
    - name: Test package import
      run: |
        python -c "import gui_image_studio; print('Package version:', gui_image_studio.__version__)"
    
    - name: Test CLI functionality
      run: |
        cd test_workspace
        python -m gui_image_studio.sample_creator
        python -c "import os; print('Sample images created:', os.path.exists('sample_images'))"
    
    - name: Cleanup test files
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          rmdir /s /q test_workspace
        else
          rm -rf test_workspace
        fi
      shell: bash
      if: always()

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 --exclude=__pycache__,*embedded_images.py
    
    - name: Check code formatting with black
      run: |
        black --check src/ --line-length=88 --exclude=".*embedded_images\.py"
    
    - name: Check import sorting
      run: |
        isort --check-only src/ --profile=black --skip-glob="*embedded_images.py"